<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>軟體工程師轉職指南：選擇最佳學習路徑</title>
    <url>/2024/051410000.html</url>
    <content><![CDATA[<h1 id="軟體工程師轉職指南：選擇最佳學習路徑"><a href="#軟體工程師轉職指南：選擇最佳學習路徑" class="headerlink" title="軟體工程師轉職指南：選擇最佳學習路徑"></a><strong>軟體工程師轉職指南：選擇最佳學習路徑</strong></h1><p>轉職軟體工程師就像開啟一場新的冒險，最先要面對的挑戰就是如何挑選對的學習管道。這方面選擇眾多，免費的 <a href="https://www.google.com/search?q=AppWorks+School">AppWorks School</a>，地區眾多的<a href="https://www.iii.org.tw/">資策會</a>，和由 Youtuber**<a href="https://www.youtube.com/@cwpeng-course">彭彭的課程</a>創立的** <a href="https://www.google.com/search?q=WeHelp+Bootcamp">WeHelp Bootcamp</a> 等實體課程，或 <a href="https://www.google.com/search?q=Alpha+Camp">Alpha Camp</a>、<a href="https://www.google.com/search?q=%E5%85%AD%E8%A7%92%E5%AD%B8%E9%99%A2">六角學院</a> 的線上課程，還有英文比較好的可以考慮外國學習平台如 <a href="https://www.google.com/search?q=Udemy">Udemy</a> 和 <a href="https://www.google.com/search?q=Coursera">Coursera</a>。</p>
<p>面對這麼多選擇，找到最合適的學習資源成了許多人的一大頭疼。就不同的程式語言&#x2F;工程師相關知識來說，網路上的各種免費資源以及培訓課程都可以助你實現夢想。但事實上每個人的學習風格、背景和目標都不盡相同會影響到最後轉職的成敗。所以如何在這堆資源中選擇，是挑戰的第一步也是最重要的一步。接下來，我會分別介紹不同的資源。</p>
<h2 id="實體培訓課程"><a href="#實體培訓課程" class="headerlink" title="實體培訓課程"></a><strong>實體培訓課程</strong></h2><p>實體的 Bootcamp 培訓課程，算是歷史比較悠久的工程師轉職方法。但相對上投入的時間(基本上都是全職投入最少 4-6 個月的時間完成課程)以及費用成本都不少：即使是完全免費的 AppWorks School，需要離職最少四個月完全沒有收入仍要承擔生活的費用，還不要說其他學程還需要差不多十萬的學費。如果沒有考慮清楚，這麼在經濟的損失上將會不小。</p>
<p>但同時在實體課程最大好處就是「環境與文化」，特別當你有一群一起奮鬥的戰友你中途放棄的動機將會大大的減少。當看到別人也同樣為了一些程序苦惱時，在自己卡關時就不會那麼焦慮；或是看到大家周末都在做專案時，會覺得自己應該再拼一點。這些都是實體培訓課的推動力。</p>
<p>最後，實體課程一般會有 demo day 以及媒合日，這些最後的作品平台以及課程的口碑在找工作階段時也會令你更容易找到轉職後的工作</p>
<h3 id="Appworks-School"><a href="#Appworks-School" class="headerlink" title="Appworks School"></a><a href="https://tw.alphacamp.co/">Appworks School</a></h3><p>在搜集台灣 coding bootcamp 資料時，Appworks School 可能算是台灣最具知名度的實體 bootcamp…基本上都是它的課程資訊。AppWorks School 成立於 2016 年，最大的特色是完全免費參加，每期維持約 4 個月(4 周線上學習+16 周台北駐點集訓)。對比其他需要約十多萬學費的課程對經濟的負擔實在是相差太遠。而且在網絡找到的評價都十分不錯。在報名之前 AppWork School 有提供一些基本的學習資源可以作為初步了解 Coding 以及確認對 Coding 的興趣和熱情。這個課程最大的缺點就是錄取率很低，看之前的資料，每屆的錄取率可能只有約 15%。所以在確定報名的時候需要足夠的決心以及學會在報名資料中讓 Appworks School 的人去看到你。如果對 Appworks School 的課程有興趣可以多觀看他們的 Youtube，有一些 Q&amp;A 令你更了解到 Appwork 報名時的資訊</p>
<h3 id="資策會"><a href="#資策會" class="headerlink" title="資策會"></a><a href="https://www.iiiedu.org.tw/ispan">資策會</a></h3><p>資策會的課程眾多，有全端，前端，Java 等課程，課程約 16 ～ 20 周，上課時間為星期一到五白天也有可能配合導師在晚上或是週末假期上課。費用按不同課程大概在十萬多一點，在網絡上看來也算是滿有口碑的。資策會在台灣各地都有分部，如果不是住在台北希望在離家比較近的地點學習，資策會可能是一個比較多地點的選擇。按課程資料，專題的製作會是課程的一大重點，由個人小專題到團體合作的專題都有，完訓後有履歷的討論，面試技巧的課程以及產業媒合。對比 Appworks School 的課程，沒有看到有提過資策會的課程錄取率問題，所以應該有決心以及財力支持的情況下錄取的機會滿大的</p>
<h3 id="Build-School"><a href="#Build-School" class="headerlink" title="Build School"></a><a href="https://www.build-school.com/">Build School</a></h3><p>Build School 成立於 2016 年，台北及新竹都有開辦課程。創辦人 Dann Wu 是微軟出身，所以在課程設計上及課程講師都與微軟有關連。Build School 課程為 23 週的訓練及實作：1-13 週是基礎教學，14-22 週是專題實作。課程中以作品專案式的學習，著重於「learn how to learn」的能力。學費約為 8-9 萬，Build School 有提出彈性結訓後學費分期方案  <strong>，</strong>一開始付學費約 NTD 37,500，待學員結訓後，再付剩餘的學費以減輕學習的成本。(以上參考金額為 2024 夏季班為標準, 最新資訊請到 Build School 網站)</p>
<hr>
<h2 id="線上培訓課程"><a href="#線上培訓課程" class="headerlink" title="線上培訓課程"></a><strong>線上培訓課程</strong></h2><p>如果覺得實體培訓課程的時間成本，經濟成本太高，或是只是想有系統性的兼職學習程式，線上培訓課程也是另一個選擇。對比之下線上培訓課程缺少了一起學習一起面對困難的同伴，也會因為缺乏時間的壓力所以最後也不了了之。但是如果不想全身投入，也有一定的自制力的話線上的課程也是一個選項。線上培訓課程對比免費的資源多了一些助教，社群的機制，在面對困難時還是有一定幫助。當然，現在網絡上也有很多的免費資源，如果是單純想了解 Coding 的知識，在下段內容將會提供一些相關的免費資源學習。</p>
<h3 id="Alpha-Camp"><a href="#Alpha-Camp" class="headerlink" title="Alpha Camp"></a><a href="https://tw.alphacamp.co/">Alpha Camp</a></h3><p>Alpha Camp 是筆者正在使用的課程, AC 的課程為分四階段: 第一階段是四週的程式入門，第二階段為前端開發實作，第三階段是後端開發實作以及第四階段的前&#x2F;後端專修。完成四階段的費用比實體課程稍低一些。課程中有不同的作業以及助教批改評論。AC 課程最大的特色是有一個健全的社群：每周的線上助教 QA 時間，同學的技術討論，每周的 co-working space 與同學一同交流學習分享經驗，定期舉辦的校友分享以及 side project 求職小組的媒合。這些在轉職求職時除了知識以外很重要的資源。</p>
<h3 id="六角學院"><a href="#六角學院" class="headerlink" title="六角學院"></a><a href="https://www.hexschool.com/">六角學院</a></h3><p>六角學院的課程以前端為主，分不同的主題課程可以按學生的程度去選擇，課程費用大概 1-3 千不等而前端全組合費用約為 NTD13,950。創辦人之一卡斯伯的部落格內容十分豐富，筆者是先查到卡斯伯的部落格才發現到六角學院。按網上的資料(因為筆者為後端工程師所以沒有詳細了解六角學院的相關資訊)六角學院的課程十分適合培養前端的基礎，對基本觀念的解釋也很清晰，適合作為轉職初階的第一步。</p>
<h3 id="WeHelp-Bootcamp"><a href="#WeHelp-Bootcamp" class="headerlink" title="WeHelp Bootcamp"></a><a href="https://wehelp.tw/">WeHelp Bootcamp</a></h3><p>WeHelp 是由 YouTuber 彭彭的課程 創辦的，在 Youtube 上也有很多免費的課程可以體驗。WeHelp 是在 2021 開辦的。WeHelp 是類似實體課程的模式在 26 週的課程提供作業和專案實作以及畢業後的求職導向模式，主要是線上互動為主但也可以參加在台北的實體活動。課程分三階段:網<strong>站</strong>開發基礎(第一階段)，電商網站實務(第二階段)以及個人專案、求職準備(第三階段)，課程約三至四萬(是否出席實體活動)。根據網站的資料每屆錄取率約百分之三十。在網站上有之前每一屆的專案展示以及招生說明會的紀錄，如果有興趣可以到網站上查看</p>
<h3 id="Udemy"><a href="#Udemy" class="headerlink" title="Udemy"></a><a href="https://www.udemy.com/">Udemy</a></h3><p>Udemy 是一個外國的學習平台，有超級超級超級多課程包括轉職軟體工程師或是不同程式語言主題的課程。因為是外國的平台所以英文課程為主所以比較適合英文一定水平的同學，當然也有部份的中文課程所以也可以在 Udemy 了解。課程約在 NTW2000~4000 範圍之間，但 Udemy 會不定時有優惠可以在數百元的情況下就買到課程，如果不是急上課的話可以等到合適的時機再買節省費用。</p>
<p>在 Udemy 上比較熱門的課程有<strong>Dr. A</strong>ngela Yu - The Complete 2024 Web Development Bootcamp(超過 125 萬學生)及 Colt Steele - The Web Developer Bootcamp 2024(超過 90 萬學生)</p>
<p>Dr. Angela Yu 是 Udemy 中其中一位最受歡迎的老師，她的課程還會包括到 Web3, NFT，Crypto。</p>
<p>Colt Steele 也是一位十分受歡迎的老師，在課程上會比較多練習以及比較基礎的內容。</p>
<hr>
<h2 id="免費的線上資源"><a href="#免費的線上資源" class="headerlink" title="免費的線上資源"></a>免費的線上資源</h2><p>現在網絡上的免費資源有很多而且都不乏質量的內容，如果希望以最少的經濟成本去學習，令到這些免費的資源相信都可以去到很好的程度。以下是部分我在學習過程中留意到的資源:</p>
<h3 id="CS50"><a href="#CS50" class="headerlink" title="CS50"></a><a href="https://learning.edx.org/course/course-v1:HarvardX+CS50+X/home">CS50</a></h3><p>CS50 是哈佛大學的通識課程，是一門在介紹 Computer Science 的課。CS50 在全球是相當知名而且熱門的課程，每年修課人數超過萬人，也是哈佛大學跟 edX 上最多人選修的課程。相信每一個軟工就算沒有認真上過都一定會知道 CS50 的這堂課。CS50 可以在 edX 上免費修讀，如果想要 edX 上的證書則需要 USD219。不過如果完成 CS50 中所有的功課，也可以免費申請 CS50 課程的證書。CS50 課程是是計算機基礎，十分著重計數機及程式後的原理而非語言的應用。因為大部分的 Bootcamp 都是教導程式語言及應用，CS50 的課程則很好的填補了基礎的空白。</p>
<h3 id="FreeCode-Camp"><a href="#FreeCode-Camp" class="headerlink" title="FreeCode Camp"></a><a href="https://www.freecodecamp.org/">FreeCode Camp</a></h3><p>FreeCode Camp (FCC)是一個十分熱門的 Web 開發學習平台，鼓勵 Learning by Doing 的學習方式。前端、後端、數據可視化等幾乎涵蓋所有的 Web 開發知識都有相關的課程，在 YouTube 上也很有多課程。FCC 課程都是以習題式的練習搭配相關語法介紹。每個課程都有小主題，在課程的作業完成後會頒發證書加入自己的履歷或者 Linkedin 去求職。</p>
<h3 id="YouTube"><a href="#YouTube" class="headerlink" title="YouTube"></a>YouTube</h3><p>在 YouTube 上，有許多知名的程式語言教學頻道，其中包括彭彭的課程、Net Ninja 和 Traversy Media。這些頻道提供了豐富多樣的程式開發相關內容，涵蓋了從基礎到高級的各種主題。</p>
<p>首先，<a href="https://www.youtube.com/@cwpeng-course">彭彭的課程</a>的內容深入但易於理解。他的課程涵蓋了多種前後端的程式語言，框架，並通過不同的教學來幫助學生深入理解。無論您是初學者還是有一定程式開發經驗，都能在彭彭的課程中找到適合自己的內容。</p>
<p>其次，<a href="https://www.youtube.com/@NetNinja">Net Ninja</a> 提供了豐富的前端開發相關教學。從 HTML、CSS 到 JavaScript，再到 React 和 Vue 等前端框架再到 MongoDB 和 MySQL 等，Net Ninja 的課程涵蓋了前後端開發的各個方面。他的教學風格清晰明了，並且經常以實例演示來加深學生的理解。</p>
<p>最後，<a href="https://www.youtube.com/@TraversyMedia">Traversy Media</a> 也是涵蓋了廣泛的主題，包括前端、後端和全端開發，以及各種程式語言和框架的教學。Traversy Media 的教學內容豐富，並且注重實用性和實戰應用，對於想要快速入門並掌握實用技能的學生來說是一個不可多得的資源。</p>
<p>總的來說，在 YouTube 上有許多優質的程式開發相關教學頻道，彭彭的課程、Net Ninja 和 Traversy Media 僅僅是其中的幾個代表。</p>
<hr>
<h2 id="總結，所以應該怎樣去學習程式"><a href="#總結，所以應該怎樣去學習程式" class="headerlink" title="總結，所以應該怎樣去學習程式?"></a><strong>總結，所以應該怎樣去學習程式?</strong></h2><p>總結來看，學習程式開發是一項需要不斷學習和實踐的過程。無論您選擇哪種學習途徑，都應該考慮以下幾點：</p>
<p>首先，了解自己的學習風格和目標。每個人的學習方式和目標都不同，有些人喜歡通過閱讀書籍學習，有些人則更喜歡通過觀看視頻或參加實際項目來學習。同時，您也應該明確自己的學習目標，是想要轉行成為一名專業的軟體工程師，還是只是想要獲得一些基礎知識。</p>
<p>其次，選擇合適的學習資源。根據自己的學習風格和目標，選擇適合自己的學習途徑和資源是至關重要的。您可以選擇參加實體培訓課程，如 Bootcamp 或實體課程，也可以選擇在線培訓課程，如 Alpha Camp 或 Udemy，還可以通過免費的線上資源，如 CS50 和 FreeCode Camp 來學習。</p>
<p>再者，堅持不懈地學習和實踐。學習程式開發是一項需要持之以恆的過程，您需要不斷地學習新知識，並通過實際項目來應用這些知識。在學習的過程中可能會遇到困難和挫折，但是只要堅持不懈地努力，最終一定能夠取得成功。</p>
<p>最後，不斷地更新和提升自己的技能。隨著科技的不斷發展和變化，程式開發領域也在不斷地變化和演進。因此，作為一名程式開發者，您應該保持開放的心態，不斷地學習新知識和技能，並不斷地提升自己的能力，以應對未來的挑戰和機遇。</p>
<p>總的來說，學習程式開發是一項充滿挑戰但也充滿樂趣的過程。通過適合自己的學習途徑和資源，堅持不懈地學習和實踐，以及不斷地更新和提升自己的技能，您一定能夠成為一名優秀的軟體工程師，並在這個領域中取得成功。</p>
]]></content>
      <categories>
        <category>學習辦法</category>
      </categories>
      <tags>
        <tag>轉職軟體工程師</tag>
        <tag>學習平台</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript的基本介紹</title>
    <url>/2024/060521831.html</url>
    <content><![CDATA[<p>網頁標準網頁技術由三大語言構成：HTML、CSS、JavaScript。</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/HTML">HTML</a>  是一種標記語言，我們使用它組織網頁裡的內容並給予不同層次的定義， 例如：主副標題、資料表格，連結或是嵌入圖片和影片。</li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/CSS">CSS</a>  是一種樣式規則的語言，用來幫 HTML 內容上套用樣式，例如：設置背景顏色、字型，或讓內容以多欄的方式呈現。</li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/JavaScript">JavaScript</a>  是一種腳本語言，它能夠動態更新內容、控制多媒體、動畫……幾乎所有原始網站上的互動都是透過 JavaScript 來控制。</li>
</ul>
<p>網頁透過 HTML 及 CSS 結構化，做成希望的視覺呈現方式，再藉由 JavaScript，加入動態效果並與使用者互動，就是組成網站的元素。</p>
<p>暫時在此只討論 JavaScript，HTML 及 CSS 將會在其後繼續討論。在 Stack Overflow 的調查中，在 2023 年中最受歡迎的程序語言就是 JavaScirpt，原因在於除了前端工程師會使用 JavaScirpt 外，在 Node.js 的執行環境協助下，JavaScript 也可以用到後端開發的應用上，使得工程師只需懂得一個語言，就可以應用到前後端的工程上，可算是 CP 值十分高，也受到工程師們歡迎。當然還有其他如開放的標準和龐大的討論社區，穩定的框架和靈活性等都令 JavaScript 的工程師連結加深</p>
<h2 id="網頁標準網頁技術由三大語言構成：HTML、CSS、JavaScript"><a href="#網頁標準網頁技術由三大語言構成：HTML、CSS、JavaScript" class="headerlink" title="網頁標準網頁技術由三大語言構成：HTML、CSS、JavaScript"></a><strong>網頁標準網頁技術由三大語言構成：HTML、CSS、JavaScript</strong></h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a><strong>HTML</strong></h3><p><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/HTML">HTML</a> 是一種標記語言，我們使用它組織網頁裡的內容並給予不同層次的定義，例如：主副標題、資料表格，連結或是嵌入圖片和影片。</p>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a><strong>CSS</strong></h3><p><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/CSS">CSS</a> 是一種樣式規則的語言，用來幫 HTML 內容上套用樣式，例如：設置背景顏色、字型，或讓內容以多欄的方式呈現。</p>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a><strong>JavaScript</strong></h3><p><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/JavaScript">JavaScript</a> 是一種腳本語言，它能夠動態更新內容、控制多媒體、動畫……幾乎所有原始網站上的互動都是透過 JavaScript 來控制。</p>
<p>網頁透過 HTML 及 CSS 結構化，做成希望的視覺呈現方式，再藉由 JavaScript，加入動態效果並與使用者互動，就是組成網站的元素。</p>
<p>暫時在此只討論 JavaScript，HTML 及 CSS 將會在其後繼續討論。在 Stack Overflow 的調查中，在 2023 年中最受歡迎的程序語言就是 JavaScript，原因在於除了前端工程師會使用 JavaScript 外，在 Node.js 的執行環境協助下，JavaScript 也可以用到後端開發的應用上，使得工程師只需懂得一個語言，就可以應用到前後端的工程上，可算是 CP 值十分高，也受到工程師們歡迎。當然還有其他如開放的標準和龐大的討論社區，穩定的框架和靈活性等都令 JavaScript 的工程師連結加深。</p>
<hr>
<h2 id="JavaScript-核心概念"><a href="#JavaScript-核心概念" class="headerlink" title="JavaScript 核心概念"></a><strong>JavaScript 核心概念</strong></h2><h3 id="變數和資料型別"><a href="#變數和資料型別" class="headerlink" title="變數和資料型別"></a><strong>變數和資料型別</strong></h3><p>JavaScript 支援多種資料型別，包括數字、字串、布林、陣列和物件。宣告變數時，可以使用 <strong><code>var</code><strong>、</strong><code>let</code></strong> 或 **<code>const</code>**：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;John&quot;</span>; <span class="comment">// 字串</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">30</span>; <span class="comment">// 數字</span></span><br><span class="line"><span class="keyword">var</span> isStudent = <span class="literal">true</span>; <span class="comment">// 布林</span></span><br></pre></td></tr></table></figure>

<h3 id="函式"><a href="#函式" class="headerlink" title="函式"></a><strong>函式</strong></h3><p>函式是 JavaScript 的基本單位，用於封裝可重用的邏輯：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(); <span class="comment">// 呼叫函式</span></span><br></pre></td></tr></table></figure>

<h3 id="物件和陣列"><a href="#物件和陣列" class="headerlink" title="物件和陣列"></a><strong>物件和陣列</strong></h3><p>物件和陣列是 JavaScript 中常用的資料結構：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<h3 id="事件處理"><a href="#事件處理" class="headerlink" title="事件處理"></a><strong>事件處理</strong></h3><p>JavaScript 可以監聽和回應用戶的行為，例如點擊按鈕或提交表單：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myButton&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Button clicked!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="JavaScript-應用場景"><a href="#JavaScript-應用場景" class="headerlink" title="JavaScript 應用場景"></a><strong>JavaScript 應用場景</strong></h2><h3 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a><strong>前端開發</strong></h3><p>在前端開發中，JavaScript 與 HTML 和 CSS 一起使用，構建互動且動態的網頁。常見的框架和庫包括 <a href="https://reactjs.org/">React</a>、<a href="https://angular.io/">Angular</a> 和 <a href="https://vuejs.org/">Vue.js</a>。</p>
<h3 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a><strong>後端開發</strong></h3><p>借助 <a href="https://nodejs.org/">Node.js</a>，JavaScript 能夠在伺服器端執行，處理請求和資料庫操作。例如，使用 <a href="https://expressjs.com/">Express</a> 框架可以快速搭建 Web 應用：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is running on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="全端開發"><a href="#全端開發" class="headerlink" title="全端開發"></a><strong>全端開發</strong></h3><p>JavaScript 的全端特性使開發人員能夠在前後端之間無縫切換。全端框架如 <a href="https://nextjs.org/">Next.js</a> 和 <a href="https://nuxtjs.org/">Nuxt.js</a> 提供了強大的工具來構建完整的應用。</p>
<h3 id="移動應用開發"><a href="#移動應用開發" class="headerlink" title="移動應用開發"></a><strong>移動應用開發</strong></h3><p>JavaScript 也能用於開發跨平台的移動應用，例如使用 <a href="https://reactnative.dev/">React Native</a> 或 <a href="https://ionicframework.com/">Ionic</a>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Text</span>, <span class="title class_">View</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-native&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello, mobile world!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他應用"><a href="#其他應用" class="headerlink" title="其他應用"></a><strong>其他應用</strong></h3><p>除了以上應用場景，JavaScript 還能用於物聯網（IoT）、遊戲開發和機器學習等領域。開源社區提供了大量的庫和框架，幫助開發人員實現各種創新應用。</p>
<hr>
<h2 id="學習資源和實踐"><a href="#學習資源和實踐" class="headerlink" title="學習資源和實踐"></a><strong>學習資源和實踐</strong></h2><p>學習 JavaScript 最好的方法是通過實踐來鞏固知識。以下是一些推薦的學習資源和實踐方法：</p>
<h3 id="線上資源"><a href="#線上資源" class="headerlink" title="線上資源"></a><strong>線上資源</strong></h3><ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript">MDN Web Docs</a>: 詳細的 JavaScript 文件和範例。</li>
<li><a href="https://javascript.info/">JavaScript.info</a>: 深入淺出的 JavaScript 教程。</li>
<li>Codecademy: 互動式的 JavaScript 課程。</li>
</ul>
<h3 id="實作專案"><a href="#實作專案" class="headerlink" title="實作專案"></a><strong>實作專案</strong></h3><ul>
<li>建立一個個人網站，使用 JavaScript 添加互動功能。</li>
<li>開發一個簡單的單頁應用（SPA），例如待辦事項清單。</li>
<li>嘗試構建一個後端 API，並使用前端應用進行資料交換。</li>
</ul>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a><strong>總結</strong></h2><p>JavaScript 不僅是前端開發的基石，還在後端、全端和移動應用開發中發揮著重要作用。其豐富的學習資源和廣泛的應用場景使得它成為開發者必學的語言之一。通過學習 JavaScript，開發者能夠建立動態、互動且創新的網頁和應用，並在不同領域中實現自己的想法和專案。在接下來的內容，將繼續探討 HTML 和 CSS，全面掌握網頁技術。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AlphaCamp_Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 JavaScript的變數</title>
    <url>/2024/060610507.html</url>
    <content><![CDATA[<h2 id="什麼是變數？"><a href="#什麼是變數？" class="headerlink" title="什麼是變數？"></a><strong>什麼是變數？</strong></h2><p>變數是值的容器，例如數字、字串等。變數的特殊之處在於它們包含的值可以改變。我們來看一個簡單的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>請按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line">button.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="title function_">prompt</span>(<span class="string">&quot;你叫什麼名字?&quot;</span>);</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;你好 &quot;</span> + name + <span class="string">&quot;, 很高興認識你!&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在這個示例中，按下按鈕會運行幾行代碼。第一行要求讀者輸入其名稱，然後將值存儲在變數中。第二行顯示包含變數值的歡迎消息。</p>
<h2 id="為什麼使用變數？"><a href="#為什麼使用變數？" class="headerlink" title="為什麼使用變數？"></a><strong>為什麼使用變數？</strong></h2><p>如果不使用變數，程式碼會變得冗長且低效。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="title function_">prompt</span>(<span class="string">&quot;What is your name?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (name === <span class="string">&quot;Adam&quot;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Hello Adam, nice to see you!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (name === <span class="string">&quot;Alan&quot;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Hello Alan, nice to see you!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (name === <span class="string">&quot;Bella&quot;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Hello Bella, nice to see you!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (name === <span class="string">&quot;Bianca&quot;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Hello Bianca, nice to see you!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (name === <span class="string">&quot;Chris&quot;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Hello Chris, nice to see you!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣做顯然是低效的。如果我們沒有變數，我們就不得不寫大量的代碼來檢查輸入的名字，然後顯示相應名稱的消息。使用變數是更明智的選擇。</p>
<h2 id="變數的其他特性"><a href="#變數的其他特性" class="headerlink" title="變數的其他特性"></a><strong>變數的其他特性</strong></h2><p>變數能夠存儲任何東西，不僅是字串和數字，還可以存儲更複雜的數據，甚至是函數。</p>
<h2 id="定義變數"><a href="#定義變數" class="headerlink" title="定義變數"></a><strong>定義變數</strong></h2><p>要使用變數，首先需要定義它。語法是在關鍵字 <strong><code>var</code></strong> 或 <strong><code>let</code></strong> 之後加上變數的名字：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myName;</span><br><span class="line"><span class="keyword">let</span> myAge;</span><br></pre></td></tr></table></figure>

<p>這裡定義了兩個變數 <strong><code>myName</code></strong> 和 **<code>myAge</code>**。您可以在瀏覽器終端中輸入這些代碼，並使用自己選擇的名稱來創建一兩個變數。</p>
<h2 id="初始化變數"><a href="#初始化變數" class="headerlink" title="初始化變數"></a><strong>初始化變數</strong></h2><p>一旦定義了變數，就能夠初始化它來儲存數值。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">myName = <span class="string">&quot;Chris&quot;</span>;</span><br><span class="line">myAge = <span class="number">37</span>;</span><br></pre></td></tr></table></figure>

<p>您也可以同時定義並初始化變數：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myDog = <span class="string">&quot;Rover&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="比較-var-和-let-的不同"><a href="#比較-var-和-let-的不同" class="headerlink" title="比較 var 和 let 的不同"></a><strong>比較 <code>var</code> 和 <code>let</code> 的不同</strong></h2><p><strong><code>var</code></strong> 和 <strong><code>let</code></strong> 有一些重要的區別。**<code>let</code>** 在現代 JavaScript 中被引入，以修復 <strong><code>var</code></strong> 的一些問題。以下是幾個簡單的區別：</p>
<ul>
<li>Hoisting：**<code>var</code>** 會進行提升，而 <strong><code>let</code></strong> 不會。</li>
<li>重複定義：**<code>var</code>** 可以多次定義同一變數，而 <strong><code>let</code></strong> 不可以。</li>
</ul>
<p>總結: 盡量使用 <strong><code>let</code></strong> 而不是 **<code>var</code>**，除非需要支持舊版 Internet Explorer。</p>
<h2 id="更新變數"><a href="#更新變數" class="headerlink" title="更新變數"></a><strong>更新變數</strong></h2><p>一旦變數初始化後，可以更改其值：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">myName = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">myAge = <span class="number">40</span>;</span><br></pre></td></tr></table></figure>

<h2 id="變數命名規則"><a href="#變數命名規則" class="headerlink" title="變數命名規則"></a><strong>變數命名規則</strong></h2><h3 id="不能使用-JavaScript-保留字"><a href="#不能使用-JavaScript-保留字" class="headerlink" title="不能使用 JavaScript 保留字"></a><strong>不能使用 JavaScript 保留字</strong></h3><p>應避免使用 JavaScript 中已經具有特定意義的保留字作為變數名稱，這些關鍵字包括 return、true、break 和 function 等。使用這些保留字可能導致代碼出現意料之外的行為，並增加代碼的理解難度。</p>
<h3 id="不能以數字開頭"><a href="#不能以數字開頭" class="headerlink" title="不能以數字開頭"></a><strong>不能以數字開頭</strong></h3><p>變數名稱不能以數字開頭，否則將導致語法錯誤。例如，變數名稱 myNumber1 是合法的，但 1myNumber 將被 JavaScript 解析器視為無效標識符。</p>
<h3 id="特殊符號"><a href="#特殊符號" class="headerlink" title="特殊符號"></a><strong>特殊符號</strong></h3><p>在 JavaScript 中，可以使用錢符$或底線_作為變數名稱的首字母，例如$myNumber 或_myNumber。這些符號在特定場景下有約定俗成的使用方式，但若無特殊需求，建議儘量避免使用，以確保代碼的可讀性和一致性。</p>
<h3 id="區分大小寫"><a href="#區分大小寫" class="headerlink" title="區分大小寫"></a><strong>區分大小寫</strong></h3><p>JavaScript 是區分大小寫的語言，因此變數名稱的大小寫會影響其識別度。例如，MyNumber 和 myNumber 將被視為兩個不同的變數。</p>
<h3 id="組合字採用-camelCase-命名法"><a href="#組合字採用-camelCase-命名法" class="headerlink" title="組合字採用 camelCase 命名法"></a><strong>組合字採用 camelCase 命名法</strong></h3><p>在 JavaScript 中，推薦使用駝峰命名法（camel case）來命名變數，即將第一個單詞的首字母小寫，後續每個單詞的首字母大寫，如 myNumber。雖然也可以使用蛇形命名法（snake_case），但為了與常見的慣例保持一致性，建議採用駝峰命名法。值得注意的是，在 JavaScript 中不支持 CSS 中的烤肉串命名法（kebab-case）。</p>
<h2 id="變數資料類型"><a href="#變數資料類型" class="headerlink" title="變數資料類型"></a><strong>變數資料類型</strong></h2><p>JavaScript 支持多種資料類型，包括：</p>
<ul>
<li>數字 (Numbers)</li>
<li>字串 (Strings)</li>
<li>布林值 (Booleans)</li>
<li>陣列 (Arrays)</li>
<li>物件 (Objects)</li>
</ul>
<p>JavaScript 是一個動態型別語言，不需要在宣告變數時指定資料類型。</p>
<h2 id="常數"><a href="#常數" class="headerlink" title="常數"></a><strong>常數</strong></h2><p>常數使用 <strong><code>const</code></strong> 關鍵字定義。一經定義，常數的值就不能改變：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> daysInWeek = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> hoursInDay = <span class="number">24</span>;</span><br></pre></td></tr></table></figure>

<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a><strong>總結</strong></h2><p>本文深入探討了 JavaScript 中的變數，從定義和初始化到不同於 <strong><code>var</code></strong> 的 <strong><code>let</code></strong> 關鍵字的使用方式。我們理解了變數的重要性，它們是存儲值的容器，使我們能夠編寫更簡潔、易於理解的程式碼。透過實際示例，我們看到了如何使用變數來處理輸入並生成動態內容。最後，我們探討了變數的命名規則、資料類型以及如何使用常數。掌握這些概念將打下堅實的 JavaScript 基礎，為更深入的學習更容易理解。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AlphaCamp_Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的變數和函數提升(Hoisting)</title>
    <url>/2024/060750031.html</url>
    <content><![CDATA[<h1 id="1-變數提升"><a href="#1-變數提升" class="headerlink" title="1. 變數提升"></a>1. 變數提升</h1><p>通常，JavaScript 引擎會在正式執行之前進行一次預編譯。在這個過程中，變數聲明和函數聲明會被提升至當前作用域的頂端，然後進行後續的處理。</p>
<p>看以下代碼，我們在函數中聲明了一個變數，不過這個變數聲明是在 if 語句塊中：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hoistVariable</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!foo) &#123;</span><br><span class="line">        <span class="keyword">var</span> foo = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hoistVariable</span>();</span><br></pre></td></tr></table></figure>

<p>運行這段代碼，我們會發現 <code>foo</code> 的值是 <code>5</code>。初學者可能對此不甚理解，如果外層作用域也存在一個 <code>foo</code> 變數，就更困惑了。答案是：不會。如果當前作用域中存在此變數聲明，無論它在哪裡聲明，引用此變數時會在當前作用域中查找，不會去外層作用域。</p>
<p>這要提到預編譯機制。經過一次預編譯後，上面的代碼邏輯如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 預編譯之後</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hoistVariable</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> foo;</span><br><span class="line">    <span class="keyword">if</span> (!foo) &#123;</span><br><span class="line">        foo = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hoistVariable</span>();</span><br></pre></td></tr></table></figure>

<p>引擎將變數聲明提升到了函數頂部，初始值為 <code>undefined</code>，自然，if 語句塊會被執行，<code>foo</code> 變數被賦值為 <code>5</code>，下面的打印結果就是預期的了。</p>
<p>再看下面一個例子：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hoistVariable</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> foo = foo || <span class="number">5</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hoistVariable</span>();</span><br></pre></td></tr></table></figure>

<p><code>foo || 5</code> 這個表達式的結果是 <code>5</code> 而不是 <code>3</code>。雖然外層作用域有個 <code>foo</code> 變數，但函數內不會引用它，因為預編譯後的代碼邏輯如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 預編譯之後</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hoistVariable</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> foo;</span><br><span class="line">    foo = foo || <span class="number">5</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hoistVariable</span>();</span><br></pre></td></tr></table></figure>

<p>如果當前作用域中聲明了多個同名變數，這些變數的同一個標識符會被提升至作用域頂部，其他部分按順序執行，比如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hoistVariable</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">3</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> foo = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hoistVariable</span>();</span><br></pre></td></tr></table></figure>

<p>由於 JavaScript 沒有塊作用域，只有全局作用域和函數作用域，所以預編譯後的代碼邏輯為：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 預編譯之後</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hoistVariable</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> foo;</span><br><span class="line">    foo = <span class="number">3</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        foo = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hoistVariable</span>();</span><br></pre></td></tr></table></figure>

<h2 id="2-函數提升"><a href="#2-函數提升" class="headerlink" title="2. 函數提升"></a>2. 函數提升</h2><p>以下這段代碼很常見：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hoistFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">foo</span>(); <span class="comment">// 輸出: I am hoisted</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am hoisted&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hoistFunction</span>();</span><br></pre></td></tr></table></figure>

<p>函數可以在聲明之前被調用，與變數聲明不同的是，它能得到正確的結果。引擎把函數聲明提升到了當前作用域的頂部，預編譯後的代碼邏輯如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 預編譯之後</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hoistFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am hoisted&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">foo</span>(); <span class="comment">// 輸出: I am hoisted</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hoistFunction</span>();</span><br></pre></td></tr></table></figure>

<p>如果同一作用域中存在多個同名函數聲明，後出現的將會覆蓋前面的函數聲明：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">histFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">foo</span>(); <span class="comment">// 輸出: 2</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hoistFunction</span>();</span><br></pre></td></tr></table></figure>

<p>函數提升優先於變數提升。函數表達式不會被提升：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函數聲明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;function declaration&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 匿名函數表達式</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;anonymous function expression&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 具名函數表達式</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;named function expression&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>當函數聲明遇到函數表達式時：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hoistFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">foo</span>(); <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">var</span> foo = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">foo</span>(); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">foo</span>(); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hoistFunction</span>();</span><br></pre></td></tr></table></figure>

<p>第一次調用 <code>foo()</code>，執行函數聲明，第二次調用時，函數表達式覆蓋了函數聲明，後續調用打印相同結果。預編譯後的邏輯：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 預編譯之後</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hoistFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> foo;</span><br><span class="line">    foo = <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">foo</span>(); <span class="comment">// 2</span></span><br><span class="line">    foo = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">foo</span>(); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hoistFunction</span>();</span><br></pre></td></tr></table></figure>

<h2 id="3-為什麼要進行提升"><a href="#3-為什麼要進行提升" class="headerlink" title="3. 為什麼要進行提升"></a>3. 為什麼要進行提升</h2><p>關於變數提升和函數提升的原因，一直沒有明確的答案。Brendan Eich（JavaScript 的創始人）提到，函數提升解決了相互遞歸的問題。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEven</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">isOdd</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEven</span>(<span class="number">2</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isOdd</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">isEven</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果沒有函數提升，而是按照自下而上的順序，當 <code>isEven</code> 函數被調用時，<code>isOdd</code> 函數還未聲明，所以當 <code>isEven</code> 內部無法調用 <code>isOdd</code> 函數。因此，Brendan Eich 設計了函數提升，將函數提升至當前作用域的頂部。</p>
<h2 id="4-最佳實踐"><a href="#4-最佳實踐" class="headerlink" title="4. 最佳實踐"></a>4. 最佳實踐</h2><p>理解變數提升和函數提升有助於更好地掌握 JavaScript，但在開發中應該避免這些技巧，保持代碼的可讀性和可維護性。具體做法是：無論變數還是函數，都必須先聲明後使用。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Scott&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="keyword">function</span>(<span class="params">guest</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, <span class="string">&#x27;says hello to&#x27;</span>, guest);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> guests = [<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; guests.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> guest = guests[i];</span><br><span class="line">    <span class="comment">// do something on guest</span></span><br><span class="line">    <span class="title function_">sayHello</span>(guest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此外，ES6 中的 <code>class</code> 聲明也存在提升，但其行為與 <code>let</code>、<code>const</code> 類似，被約束和限制。如果在聲明之前引用，會拋出異常。</p>
<p>無論是早期代碼還是 ES6 中的代碼，都應遵循先聲明，後使用的原則。</p>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>了解變數和函數提升有助於掌握 JavaScript 的執行邏輯，避免潛在的陷阱。變數提升將變數聲明移至作用域頂部，初始值為 <code>undefined</code>，而函數提升則將整個函數聲明提升到頂部，確保在調用前可用。這些機制解決了函數相互遞歸等問題。然而，為了保持代碼的可讀性和可維護性，應遵循先聲明後使用的原則。使用 <code>let</code> 和 <code>const</code> 等現代語法可以進一步提高代碼的安全性和可預測性。通過理解並應用這些最佳實踐，開發者能夠編寫更健壯和可靠的 JavaScript 代碼。</p>
<p>参考資料：</p>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting">提升（Hoisting)</a></p>
<p><a href="https://www.cnblogs.com/liuhe688/p/5891273.html">JavaScript: 变量提升和函数提升</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AlphaCamp_Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript資料型別與資料結構</title>
    <url>/2024/060855654.html</url>
    <content><![CDATA[<h3 id="動態型別與弱型別"><a href="#動態型別與弱型別" class="headerlink" title="動態型別與弱型別"></a>動態型別與弱型別</h3><p>JavaScript 是弱型別和動態型別的程式語言，這意味著變數不需要事先宣告型別，且型別在程式運行時會自動轉換。以下範例展示了同一變數的不同型別使用：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">42</span>; <span class="comment">// 現在 foo 是數字</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&quot;bar&quot;</span>; <span class="comment">// 現在 foo 是字串</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>; <span class="comment">// 現在 foo 是布林值</span></span><br></pre></td></tr></table></figure>

<h3 id="ECMAScript-定義的資料型別"><a href="#ECMAScript-定義的資料型別" class="headerlink" title="ECMAScript 定義的資料型別"></a>ECMAScript 定義的資料型別</h3><p>最新的 ECMAScript 標準定義了七種資料型別，其中六種為原始型別：</p>
<ol>
<li>布林型別 (<strong>Boolean</strong>)</li>
<li>空指標 (<strong>Null</strong>)</li>
<li>未定義型別 (<strong>Undefined</strong>)</li>
<li>數字型別 (<strong>Number</strong>)</li>
<li><strong>BigInt</strong></li>
<li><strong>String</strong></li>
<li><strong>Symbol</strong>（新增於 ECMAScript 6）</li>
</ol>
<p>除此之外，還有一個非原始型別：物件 (<strong>Object</strong>)。</p>
<h3 id="布林型別"><a href="#布林型別" class="headerlink" title="布林型別"></a>布林型別</h3><p>布林型別只有兩個值：<code>true</code> 和 <code>false</code>。</p>
<h3 id="Null-型別"><a href="#Null-型別" class="headerlink" title="Null 型別"></a>Null 型別</h3><p>Null 型別只有一個值：<code>null</code>。<code>null</code> 值表示一個不存在或無效的物件引用。</p>
<h3 id="未定義型別"><a href="#未定義型別" class="headerlink" title="未定義型別"></a>未定義型別</h3><p>未被定義的變數具有 <code>undefined</code> 值。<code>undefined</code> 是自動賦給剛剛宣告的變數，或沒有實際參數的函數參數。</p>
<p><code>undefined</code> 表示值的缺失，而 <code>null</code> 表示物件的缺失。當某些東西沒有值時，JavaScript 通常預設為 <code>undefined</code>：</p>
<ul>
<li>沒有值（<code>return;</code>）的 return 語句，隱含回傳 <code>undefined</code>。</li>
<li>存取不存在的物件屬性（<code>obj.iDontExist</code>），傳回 <code>undefined</code>。</li>
<li>變數宣告時沒有初始化（<code>let x;</code>），隱式初始化為 <code>undefined</code>。</li>
<li>許多像 <code>Array.prototype.find()</code> 和 <code>Map.prototype.get()</code> 的方法，當沒有找到元素時，會傳回 <code>undefined</code>。</li>
</ul>
<p><code>null</code> 在核心語言中使用頻率較低，最重要的是在原型鏈的末端，或與原型互動的方法，如 <code>Object.getPrototypeOf()</code>、<code>Object.create()</code> 等，接受或傳回 <code>null</code> 而不是 <code>undefined</code>。</p>
<h3 id="數字型別"><a href="#數字型別" class="headerlink" title="數字型別"></a>數字型別</h3><p>根據 ECMAScript 標準，數字型別為雙精度 64 位元二進制格式的 IEEE 754 值（範圍在 -2<sup>53</sup> - 1 到 2<sup>53</sup> - 1 之間）。數字型別還包含三個特殊值：<code>+Infinity</code>、<code>-Infinity</code> 和 <code>NaN</code>。</p>
<h3 id="檢查數字的最大值與最小值"><a href="#檢查數字的最大值與最小值" class="headerlink" title="檢查數字的最大值與最小值"></a>檢查數字的最大值與最小值</h3><p>可以使用 <code>Number.MAX_VALUE</code> 和 <code>Number.MIN_VALUE</code> 常數來檢查數字的最大值或最小值。此外，從 ECMAScript 6 開始，可以使用 <code>Number.isSafeInteger()</code>、<code>Number.MAX_SAFE_INTEGER</code> 和 <code>Number.MIN_SAFE_INTEGER</code> 來檢查數字是否為安全整數。</p>
<p>數字型別有一個特殊值：<code>0</code> 同時表示 <code>-0</code> 和 <code>+0</code>（其中 <code>0</code> 是 <code>+0</code> 的別名）。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">42</span> / +<span class="number">0</span>); <span class="comment">// Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">42</span> / -<span class="number">0</span>); <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN"><code>NaN</code></a>（Not a Number）是當算術運算的結果不表示數值時的特殊值，它是 JavaScript 中唯一不等於自身的值。</p>
<h3 id="BigInt-型別"><a href="#BigInt-型別" class="headerlink" title="BigInt 型別"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#bigint_%E7%B1%BB%E5%9E%8B">BigInt 型別</a></h3><p><code>BigInt</code> 型別在 JavaScript 中是數字的原始值，可以表示任意大小的整數。使用 <code>BigInt</code>，可以安全地存儲和操作超過 Number 安全整數限制的巨大的整數。</p>
<p><code>BigInt</code> 是通過將 <code>n</code> 附加到整數末尾或調用 <code>BigInt()</code> 函數來創建的。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BigInt</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="title class_">BigInt</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>); <span class="comment">// 9007199254740991n</span></span><br><span class="line">x + <span class="number">1n</span> === x + <span class="number">2n</span>; <span class="comment">// false，因為 9007199254740992n 和 9007199254740993n 不相等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Number</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span> + <span class="number">1</span> === <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span> + <span class="number">2</span>; <span class="comment">// true，因為都等於 9007199254740992</span></span><br></pre></td></tr></table></figure>

<p>可以使用大多數運算符處理 <code>BigInt</code>，包括 <code>+</code>、<code>*</code>、<code>-</code>、<code>**</code> 和 <code>%</code>。但 <code>BigInt</code> 不能表示小數，且 <code>BigInt</code> 和 <code>Number</code> 不能互換。</p>
<h3 id="字串型別"><a href="#字串型別" class="headerlink" title="字串型別"></a>字串型別</h3><p>JavaScript 的字串型別代表文字資料，每個字串元素佔有一個位置，且字串一旦創建便不可變。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str + <span class="string">&quot; world&quot;</span>; <span class="comment">// 使用串接運算符創建新字串</span></span><br></pre></td></tr></table></figure>

<h3 id="符號型別"><a href="#符號型別" class="headerlink" title="符號型別"></a>符號型別</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><code>Symbol</code></a> 是唯一且不可變的原始值，可以用作物件屬性的鍵。它用於創建唯一屬性鍵，避免與其他鍵發生衝突。</p>
<h3 id="物件"><a href="#物件" class="headerlink" title="物件"></a>物件</h3><p>在 JavaScript 中，物件可以看作是一組屬性的集合。用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F_object_literals">物件字面量語法</a>定義一個物件時，會自動初始化一組有限的屬性；這些屬性可以被添加和移除。物件屬性等價於鍵值對。屬性鍵要麼是字串，要麼是符號。屬性值可以是任何型別的值，包括其他物件，從而構建複雜的資料結構。</p>
<p>物件有兩種屬性：<em>資料屬性</em> 和 _存取器屬性_。</p>
<h3 id="資料屬性"><a href="#資料屬性" class="headerlink" title="資料屬性"></a>資料屬性</h3><p>資料屬性將鍵與值相關聯，可以通過以下屬性描述：</p>
<ul>
<li><code>value</code>：屬性的值。</li>
<li><code>writable</code>：布林值，表示是否可以通過賦值來改變屬性。</li>
<li><code>enumerable</code>：布林值，表示是否可以通過 <code>for...in</code> 枚舉屬性。</li>
<li><code>configurable</code>：布林值，表示該屬性是否可以刪除，是否可以更改為存取器屬性，並更改其特性。</li>
</ul>
<h3 id="存取器屬性"><a href="#存取器屬性" class="headerlink" title="存取器屬性"></a>存取器屬性</h3><p>存取器屬性將鍵與兩個存取器函數（<code>get</code> 和 <code>set</code>）相關聯，以獲取或存儲值。</p>
<ul>
<li><code>get</code>：使用空參數列表的函數，當訪問屬性值時執行。</li>
<li><code>set</code>：使用包含分配值的參數調用的函數，當嘗試更改屬性值時執行。</li>
<li><code>enumerable</code>：布林值，表示是否可以通過 <code>for...in</code> 枚舉屬性。</li>
<li><code>configurable</code>：布林值，表示該屬性是否可以刪除，是否可以更改為存取器屬性，並更改其特性。</li>
</ul>
<h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><p>JavaScript 使用內建的 <code>Date</code> 物件來表示日期和時間。</p>
<h3 id="索引類：陣列-Array-與類型化陣列-Typed-Array"><a href="#索引類：陣列-Array-與類型化陣列-Typed-Array" class="headerlink" title="索引類：陣列 (Array) 與類型化陣列 (Typed Array)"></a>索引類：陣列 (Array) 與類型化陣列 (Typed Array)</h3><p>陣列是帶有特殊關係的物件，提供了便利的方法如 <code>indexOf()</code> 和 <code>push()</code>。類型化陣列則提供了操作底層二進位資料緩衝區的方式。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Typed_arrays">類型化</a>陣列表示底層二進位緩衝區的類陣列視圖，並且提供了與陣列相對應的類似語義</p>
<h3 id="使用-typeof-運算子來判斷型別"><a href="#使用-typeof-運算子來判斷型別" class="headerlink" title="使用 typeof 運算子來判斷型別"></a>使用 <code>typeof</code> 運算子來判斷型別</h3><p><code>typeof</code> 運算子可以檢查變數的型別，傳回一個字串值</p>
<table>
<thead>
<tr>
<th>型別</th>
<th>傳回</th>
</tr>
</thead>
<tbody><tr>
<td>Undefined</td>
<td>“undefined”</td>
</tr>
<tr>
<td>Null</td>
<td>“object”</td>
</tr>
<tr>
<td>Boolean</td>
<td>“boolean”</td>
</tr>
<tr>
<td>Number</td>
<td>“number”</td>
</tr>
<tr>
<td>String</td>
<td>“string”</td>
</tr>
<tr>
<td>主機端物件 (由 JS 執行環境提供)</td>
<td>視實作方式而異</td>
</tr>
<tr>
<td>Function 物件 (實作 ECMA-262 所定義的 [[Call]])</td>
<td>“function”</td>
</tr>
<tr>
<td>E4X XML 物件</td>
<td>“xml”</td>
</tr>
<tr>
<td>E4X XMLList 物件</td>
<td>“xml”</td>
</tr>
<tr>
<td>所有其它物件</td>
<td>“object”</td>
</tr>
</tbody></table>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>本文探討了 JavaScript 中的動態型別和弱型別特性，以及 ECMAScript 定義的資料型別。我們論述了布林型別、Null 型別、未定義型別、數字型別、BigInt 型別、字串型別和符號型別的特性和用法。此外，我們還討論了物件的屬性類型和使用 <code>typeof</code> 運算子來檢查變數型別的方法。這些知識有助於開發人員更好地理解 JavaScript 的資料型別系統，並實現更有效的程式設計和錯誤處理。</p>
<h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Data_structures">MDN Web Docs</a></li>
<li>**[JavaScript 数据类型和数据结构] (**<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures%EF%BC%89">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures）</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Null">Null</a></li>
<li>[Undefined] (<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Undefined">https://developer.mozilla.org/zh-CN/docs/Glossary/Undefined</a>)</li>
<li>[Typeof] (<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/typeof">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/typeof</a>)</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AlphaCamp_Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript物件</title>
    <url>/2024/06097389.html</url>
    <content><![CDATA[<h2 id="創建新物件"><a href="#創建新物件" class="headerlink" title="創建新物件"></a>創建新物件</h2><h3 id="使用物件初始器"><a href="#使用物件初始器" class="headerlink" title="使用物件初始器"></a>使用物件初始器</h3><p>你可以使用物件初始器來創建一個物件。物件初始器也稱為物件字面量。物件初始器的語法如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="title class_">Name</span> <span class="number">1</span>: <span class="title class_">Value</span> <span class="number">1</span>, <span class="comment">// 屬性名稱可以是識別符、數字或字符串</span></span><br><span class="line">  <span class="title class_">Name</span> <span class="number">2</span>: <span class="number">2</span>, <span class="comment">// 或數字</span></span><br><span class="line">  <span class="string">&quot;Name n&quot;</span>: <span class="number">3</span>, <span class="comment">// 或字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在這個例子中，新創建的物件被賦值給一個變數 <code>obj</code> — 這是可選的。如果你不需要在其他地方引用這個物件，你可以不必將其賦值給一個變數。如果物件字面量出現在預期的語句位置，你可能需要將物件字面量括在括號中，以免字面量與塊語句混淆。</p>
<p>物件初始器是表達式，每次執行包含它的語句時都會創建一個新物件。相同的物件初始器創建不同的物件，這些物件彼此不相等。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x;</span><br><span class="line"><span class="keyword">if</span> (cond) &#123;</span><br><span class="line">  x = &#123; <span class="attr">greeting</span>: <span class="string">&quot;hi there&quot;</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用構造函數"><a href="#使用構造函數" class="headerlink" title="使用構造函數"></a>使用構造函數</h3><p>另外，可以通過以下兩個步驟來創建一個物件：</p>
<ol>
<li>通過編寫構造函數來定義物件類型。有一個很好的傳統是使用大寫字母開頭。</li>
<li>使用 <code>new</code> 關鍵字創建物件的實例。</li>
</ol>
<p>要定義一個物件類型，創建一個函數，函數指定它的名稱、屬性和方法。例如，假設你想為汽車創建一個物件類型。你希望這種類型的物件被稱為 <code>Car</code>，並且你希望它有用於製造商、型號和年份的屬性。為此，你將編寫以下函數：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">make, model, year</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">make</span> = make;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">model</span> = model;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">year</span> = year;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>現在，可以創建一個名為 <code>myCar</code> 的物件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myCar = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Eagle&quot;</span>, <span class="string">&quot;Talon TSi&quot;</span>, <span class="number">1993</span>);</span><br></pre></td></tr></table></figure>

<p>這個語句創建了 <code>myCar</code>，並且將其屬性的指定值分別設置為 “Eagle”、”Talon TSi” 和 1993。然後 <code>myCar.make</code> 的值是字符串 “Eagle”，<code>myCar.model</code> 的值是字符串 “Talon TSi”，<code>myCar.year</code> 的值是整數 1993，等等。參數和函數的順序應該是一樣的。</p>
<p>你可以通過調用 <code>new</code> 來創建任意數量的 <code>Car</code> 物件。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> kenscar = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Nissan&quot;</span>, <span class="string">&quot;300ZX&quot;</span>, <span class="number">1992</span>);</span><br><span class="line"><span class="keyword">const</span> vpgscar = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Mazda&quot;</span>, <span class="string">&quot;Miata&quot;</span>, <span class="number">1990</span>);</span><br></pre></td></tr></table></figure>

<p>一個物件可以有一個自己的屬性是另一個物件。例如，假設你定義了一個名為 <code>Person</code> 的物件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, sex</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後像這樣實例化兩個新的 <code>Person</code> 物件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rand = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Rand McKinnon&quot;</span>, <span class="number">33</span>, <span class="string">&quot;M&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ken = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Ken Jones&quot;</span>, <span class="number">39</span>, <span class="string">&quot;M&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>然後，你可以重新編寫 <code>Car</code> 的定義，包括一個 <code>owner</code> 屬性，它接受一個 <code>Person</code> 物件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">make, model, year, owner</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">make</span> = make;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">model</span> = model;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">year</span> = year;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">owner</span> = owner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要實例化新物件，你可以使用以下方法：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> car1 = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Eagle&quot;</span>, <span class="string">&quot;Talon TSi&quot;</span>, <span class="number">1993</span>, rand);</span><br><span class="line"><span class="keyword">const</span> car2 = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Nissan&quot;</span>, <span class="string">&quot;300ZX&quot;</span>, <span class="number">1992</span>, ken);</span><br></pre></td></tr></table></figure>

<p>請注意，在創建新物件時，上述語句不是傳遞文字或整數值作為新物件的參數，而是將物件 <code>rand</code> 和 <code>ken</code> 作為所有者的參數。然後，如果你想找出 <code>car2</code> 的所有者的名字，你可以訪問以下屬性：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">car2.<span class="property">owner</span>.<span class="property">name</span>;</span><br></pre></td></tr></table></figure>

<p>你始終可以向以前定義的物件添加屬性。例如，語句</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">car1.<span class="property">color</span> = <span class="string">&quot;black&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>將一個顏色屬性添加到 <code>car1</code>，並將其值設置為 “black”。然而，這不會影響任何其他物件。要將新屬性添加到相同類型的所有物件，你必須將屬性添加到 <code>Car</code> 物件類型的定義中。</p>
<h3 id="使用-Object-create-方法"><a href="#使用-Object-create-方法" class="headerlink" title="使用 Object.create() 方法"></a>使用 <code>Object.create()</code> 方法</h3><p>物件也可以使用 <code>Object.create()</code> 方法創建。這個方法非常有用，因為它允許你選擇要為所要創建的物件選擇原型物件，而無需定義構造函數。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 動物屬性和方法封裝</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Animal</span> = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;無脊椎動物&quot;</span>, <span class="comment">// 屬性的默認值</span></span><br><span class="line">  <span class="title function_">displayType</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 顯示動物類型的方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">type</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建名為 animal1 的新動物類型</span></span><br><span class="line"><span class="keyword">const</span> animal1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>);</span><br><span class="line">animal1.<span class="title function_">displayType</span>(); <span class="comment">// 輸出: 無脊椎動物</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建名為 fish 的新動物類型</span></span><br><span class="line"><span class="keyword">const</span> fish = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>);</span><br><span class="line">fish.<span class="property">type</span> = <span class="string">&quot;魚類&quot;</span>;</span><br><span class="line">fish.<span class="title function_">displayType</span>(); <span class="comment">// 輸出: 魚類</span></span><br></pre></td></tr></table></figure>

<h2 id="物件和屬性"><a href="#物件和屬性" class="headerlink" title="物件和屬性"></a>物件和屬性</h2><p>JavaScript 物件具有與之關聯的屬性。物件屬性基本上與變量相同，只是它們與物件關聯，而不是作用域。物件的屬性定義了物件的特性。</p>
<p>例如，以下示例創建了一個名為 <code>myCar</code> 的物件，其中包含名稱為 <code>make</code>、<code>model</code> 和 <code>year</code> 的屬性，它們的值分別設置為 “Ford”、”Mustang” 和 1969：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myCar = &#123;</span><br><span class="line">  <span class="attr">make</span>: <span class="string">&quot;Ford&quot;</span>,</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&quot;Mustang&quot;</span>,</span><br><span class="line">  <span class="attr">year</span>: <span class="number">1969</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>與 JavaScript 變量一樣，屬性名稱區分大小寫。屬性名稱只能是字符串或符號 — 所有鍵都轉換為字符串，除非它們是符號。事實上，陣列索引本質上是具有包含整數的字符串鍵的屬性。</p>
<h3 id="訪問屬性"><a href="#訪問屬性" class="headerlink" title="訪問屬性"></a>訪問屬性</h3><p>你可以通過屬性名稱來訪問物件的屬性。屬性訪問器有兩種語法：點表示法和括號表示法。例如，你可以這樣訪問 <code>myCar</code> 物件的屬性：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 點表示法</span></span><br><span class="line">myCar.<span class="property">make</span> = <span class="string">&quot;Ford&quot;</span>;</span><br><span class="line">myCar.<span class="property">model</span> = <span class="string">&quot;Mustang&quot;</span>;</span><br><span class="line">myCar.<span class="property">year</span> = <span class="number">1969</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 括號表示法</span></span><br><span class="line">myCar[<span class="string">&quot;make&quot;</span>] = <span class="string">&quot;Ford&quot;</span>;</span><br><span class="line">myCar[<span class="string">&quot;model&quot;</span>] = <span class="string">&quot;Mustang&quot;</span>;</span><br><span class="line">myCar[<span class="string">&quot;year&quot;</span>] = <span class="number">1969</span>;</span><br></pre></td></tr></table></figure>

<p>物件屬性名稱可以是任何 JavaScript 字符串或符號，包括空字符串。但是，你不能使用點表示法訪問屬性，如果屬性名稱不是有效的 JavaScript 標識符。例如，屬性名稱包含空格或連字符、以數字開頭，或者被包含在變量中時，只能使用括號表示法。當需要在運行時動態確定屬性名稱時，這種表示法也非常有用。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;myString&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> rand = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line"><span class="keyword">const</span> anotherObj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 myObj 上創建額外的屬性</span></span><br><span class="line">myObj.<span class="property">type</span> = <span class="string">&quot;用於類型的點表示法&quot;</span>;</span><br><span class="line">myObj[<span class="string">&quot;date created&quot;</span>] = <span class="string">&quot;此鍵包含空格&quot;</span>;</span><br><span class="line">myObj[str] = <span class="string">&quot;此鍵在變量 str 中&quot;</span>;</span><br><span class="line">myObj[rand] = <span class="string">&quot;這裡的鍵是隨機數&quot;</span>;</span><br><span class="line">myObj[anotherObj] = <span class="string">&quot;此鍵是對象 anotherObj&quot;</span>;</span><br><span class="line">myObj[<span class="string">&quot;&quot;</span>] = <span class="string">&quot;此鍵是空字符串&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myObj);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   type: &#x27;用於類型的點表示法&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;date created&#x27;: &#x27;此鍵包含空格&#x27;,</span></span><br><span class="line"><span class="comment">//   myString: &#x27;此鍵在變量 str 中&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;0.6398914448618778&#x27;: &#x27;這裡的鍵是隨機數&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;[object Object]&#x27;: &#x27;此鍵是對象 anotherObj&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;&#x27;: &#x27;此鍵是空字符串&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myObj.<span class="property">myString</span>); <span class="comment">// &#x27;此鍵在變量 str 中&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上面的代碼中，鍵 anotherObj 是一個對象，它既不是字符串也不是符號。當它被添加到 myObj 時，JavaScript 調用了 anotherObj 的 toString() 方法，並將結果字符串用作新的鍵。</p>
<p>你也可以使用存儲在變量中的字符串值來訪問屬性。變量必須以括號表示法傳遞。在上面的示例中，變量 str 包含 “myString”，這就是屬性名稱。因此，<code>myObj.str</code> 將返回 undefined。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">str = <span class="string">&quot;myString&quot;</span>;</span><br><span class="line">myObj[str] = <span class="string">&quot;此鍵在變量 str 中&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myObj.<span class="property">str</span>); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myObj[str]); <span class="comment">// &#x27;此鍵在變量 str 中&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myObj.<span class="property">myString</span>); <span class="comment">// &#x27;此鍵在變量 str 中&#x27;</span></span><br></pre></td></tr></table></figure>

<p>這允許在運行時訪問任何屬性：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> propertyName = <span class="string">&quot;make&quot;</span>;</span><br><span class="line">myCar[propertyName] = <span class="string">&quot;Ford&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通過更改變量的內容來訪問不同的屬性</span></span><br><span class="line">propertyName = <span class="string">&quot;model&quot;</span>;</span><br><span class="line">myCar[propertyName] = <span class="string">&quot;Mustang&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCar); <span class="comment">// &#123; make: &#x27;Ford&#x27;, model: &#x27;Mustang&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<p>但是，請注意使用括號來訪問屬性，特別是屬性名稱是由外部輸入給定的。可能使你的代碼易受對象注入攻擊。</p>
<h3 id="列舉屬性"><a href="#列舉屬性" class="headerlink" title="列舉屬性"></a>列舉屬性</h3><p>有三種原生方法可以列出&#x2F;遍歷對象屬性：</p>
<ol>
<li>使用 <code>for...in</code> 循環。該方法遍歷對象的所有可枚舉字符串屬性，以及其原型鏈。</li>
<li>使用 <code>Object.keys()</code>。該方法返回一個陣列，其中僅包含對象 <code>myObj</code> 中的可枚舉的自有字符串屬性（”鍵”），而不包括原型鏈中的屬性。</li>
<li>使用 <code>Object.getOwnPropertyNames()</code>。該方法返回一個陣列，其中包含對象 <code>myObj</code> 的所有自有字符串屬性的名稱，無論它們是否可枚舉。</li>
</ol>
<p>你可以使用 <code>for...in</code> 循環與括號表示法來遍歷對象的所有可枚舉屬性。下面的函數展示了當你將對象和對象的名稱作為函數的參數傳遞給該函數時，如何顯示對象的屬性：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">javascript複製程式碼;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showProps</span>(<span class="params">obj, objName</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// 使用 Object.hasOwn() 來排除來自對象的原型鏈的屬性，並僅顯示 &quot;自有屬性&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(obj, i)) &#123;</span><br><span class="line">      result += <span class="string">`<span class="subst">$&#123;objName&#125;</span>.<span class="subst">$&#123;i&#125;</span> = <span class="subst">$&#123;obj[i]&#125;</span>\n`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>“自有屬性” 這個術語指的是對象的屬性，但不包括原型鏈中的屬性。因此，調用 <code>showProps(myCar, &#39;myCar&#39;)</code> 將打印出以下內容：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">myCar.<span class="built_in">make</span> = Ford</span><br><span class="line">myCar.model = Mustang</span><br><span class="line">myCar.year = <span class="number">1969</span></span><br></pre></td></tr></table></figure>

<p>上面的示例相當於：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showProps</span>(<span class="params">obj, objName</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">    result += <span class="string">`<span class="subst">$&#123;objName&#125;</span>.<span class="subst">$&#123;i&#125;</span> = <span class="subst">$&#123;obj[i]&#125;</span>\n`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目前沒有原生方法可以列出繼承的不可枚舉屬性。不過，可以通過以下函數實現：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">listAllProperties</span>(<span class="params">myObj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> objectToInspect = myObj;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (objectToInspect !== <span class="literal">null</span>) &#123;</span><br><span class="line">    result = result.<span class="title function_">concat</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(objectToInspect));</span><br><span class="line">    objectToInspect = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(objectToInspect);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要獲取更多信息，請參閱<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">可枚舉性和屬性擁有權</a>。</p>
<h3 id="刪除屬性"><a href="#刪除屬性" class="headerlink" title="刪除屬性"></a>刪除屬性</h3><p>你可以使用 <code>delete</code> 運算符刪除非繼承的屬性。以下代碼展示了如何刪除屬性：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建一個新的對象 myobj，帶有兩個屬性 a 和 b。</span></span><br><span class="line"><span class="keyword">const</span> myobj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">myobj.<span class="property">a</span> = <span class="number">5</span>;</span><br><span class="line">myobj.<span class="property">b</span> = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除 a 屬性，留下 myobj 僅具有 b 屬性。</span></span><br><span class="line"><span class="keyword">delete</span> myobj.<span class="property">a</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span> <span class="keyword">in</span> myobj); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="繼承"><a href="#繼承" class="headerlink" title="繼承"></a>繼承</h3><p>JavaScript 中的所有對象都至少繼承自另一個對象。被繼承的對象稱為原型，並且繼承的屬性可以在構造函數的原型對象中找到。參見<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">繼承和原型鏈</a>以獲取更多信息。</p>
<h3 id="為一種類型的所有對象定義屬性"><a href="#為一種類型的所有對象定義屬性" class="headerlink" title="為一種類型的所有對象定義屬性"></a>為一種類型的所有對象定義屬性</h3><p>你可以使用 <code>prototype</code> 屬性向通過特定構造函數創建的所有對象添加屬性。這定義了一個屬性，該屬性被該類型的所有對象共享，而不僅僅是對象的一個實例。以下代碼向所有 <code>Car</code> 類型的對象添加了一個顏色屬性，然後從實例 <code>car1</code> 中讀取該屬性的值。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car1.<span class="property">color</span>); <span class="comment">// &quot;red</span></span><br></pre></td></tr></table></figure>

<h3 id="定義方法"><a href="#定義方法" class="headerlink" title="定義方法"></a>定義方法</h3><p>方法是與對象相關聯的函數，或者更直接地說，方法是對象的屬性，其值是函數。方法的定義方式與定義普通函數的方式相同，只是必須將其分配為對象的屬性。參見方法定義以獲取更多詳情。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">objectName.<span class="property">methodName</span> = functionName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myObj = &#123;</span><br><span class="line">  <span class="attr">myMethod</span>: <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="comment">// 做一些事情</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">myOtherMethod</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="comment">// 做一些其他事情</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其中 <code>objectName</code> 是現有的對象，<code>methodName</code> 是你要分配給方法的名稱，<code>functionName</code> 是函數的名稱。</p>
<p>然後你可以這樣調用方法：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">objectName.<span class="title function_">methodName</span>(params);</span><br></pre></td></tr></table></figure>

<p>通常，方法是在構造函數的原型對象上定義的，這樣相同類型的所有對象就共享了同一個方法。例如可以定義一個函數來格式化並顯示先前定義的 <code>Car</code> 對象的屬性。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">displayCar</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="string">`一輛漂亮的 <span class="subst">$&#123;<span class="variable language_">this</span>.year&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.make&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.model&#125;</span>`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>請注意，使用 <code>this</code> 來引用該方法所屬的對象。然後，你可以對每個對象調用 <code>displayCar</code> 方法，如下所示：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">car1.<span class="title function_">displayCar</span>();</span><br><span class="line">car2.<span class="title function_">displayCar</span>();</span><br></pre></td></tr></table></figure>

<h3 id="使用-this-來引用對象"><a href="#使用-this-來引用對象" class="headerlink" title="使用 this 來引用對象"></a>使用 <code>this</code> 來引用對象</h3><p>JavaScript 有一個特殊的關鍵字 <code>this</code>，你可以在方法內部使用它來引用當前對象。例如，假設你有兩個對象 <code>Manager</code> 和 <code>Intern</code>。每個對象都有自己的名稱、年齡和工作。在 <code>sayHi()</code> 函數中，請注意使用 <code>this.name</code>。當將相同的函數添加到兩個對象時，該函數將打印帶有其所附加對象的名稱的消息。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Manager</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Karina&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">27</span>,</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&quot;Software Engineer&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Intern</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Tyrone&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">  <span class="attr">job</span>: <span class="string">&quot;Software Engineer Intern&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，我的名字是 <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 sayHi 函數添加到兩個對象中</span></span><br><span class="line"><span class="title class_">Manager</span>.<span class="property">sayHi</span> = sayHi;</span><br><span class="line"><span class="title class_">Intern</span>.<span class="property">sayHi</span> = sayHi;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Manager</span>.<span class="title function_">sayHi</span>(); <span class="comment">// 你好，我的名字是 Karina</span></span><br><span class="line"><span class="title class_">Intern</span>.<span class="title function_">sayHi</span>(); <span class="comment">// 你好，我的名字是 Tyrone</span></span><br></pre></td></tr></table></figure>

<p><code>this</code> 是一個「隱藏的參數」，通過在調用函數之前指定對象，它作為參數傳遞給函數。例如，在 <code>Manager.sayHi()</code> 中，<code>this</code> 是 <code>Manager</code> 對象，因為 <code>Manager</code> 出現在 <code>sayHi()</code> 函數之前。如果你從另一個對象中訪問相同的函數，<code>this</code> 也會改變。如果你使用其他方法來調用函數，如 <code>Function.prototype.call()</code> 或 <code>Reflect.apply()</code>，則可以將 <code>this</code> 的值明確地作為參數傳遞。</p>
<h3 id="定義-getter-和-setter"><a href="#定義-getter-和-setter" class="headerlink" title="定義 getter 和 setter"></a>定義 getter 和 setter</h3><p>Getter 是與屬性相關聯的函數，用於獲取特定屬性的值。Setter 是與屬性相關聯的函數，用於設置特定屬性的值。它們可以間接表示屬性的值。</p>
<p>Getter 和 setter 可以通過以下方式之一定義：</p>
<ol>
<li>在對象初始值設置器內定義，或</li>
<li>在創建後隨時添加到任何現有對象。</li>
</ol>
<p>在對象初始值設置器內，getter 和 setter 的定義與常規方法相同，但在前面添加了 <code>get</code> 或 <code>set</code> 關鍵字。Getter 方法不能帶有參數，而 setter 方法預期恰好有一個參數（要設置的新值）。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">b</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">c</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = x / <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myObj.<span class="property">a</span>); <span class="comment">// 7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myObj.<span class="property">b</span>); <span class="comment">// 8，從 `get b()` 方法返回</span></span><br><span class="line">myObj.<span class="property">c</span> = <span class="number">50</span>; <span class="comment">// 調用 `set c(x)` 方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myObj.<span class="property">a</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p><code>myObj</code> 對象的屬性如下：</p>
<ul>
<li><code>myObj.a</code> —— 一個數字</li>
<li><code>myObj.b</code> —— 一個 getter，返回 <code>myObj.a</code> 加 1</li>
<li><code>myObj.c</code> —— 一個 setter，將 <code>myObj.a</code> 的值設置為 <code>myObj.c</code> 的值除以 2</li>
</ul>
<p>Getter 和 setter 也可以隨時添加到對象中，只需使用 <code>Object.defineProperties()</code> 方法。該方法的第一個參數是你想要定義 getter 或 setter 的對象。第二個參數是一個對象，其屬性名稱是 getter 或 setter 的名稱，屬性值是定義 getter 或 setter 函數的對象。以下是定義與前面示例中相同的 getter 和 setter 的示例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = &#123; <span class="attr">a</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(myObj, &#123;</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">c</span>: &#123;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">x</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">a</span> = x / <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myObj.<span class="property">c</span> = <span class="number">10</span>; <span class="comment">// 調用 setter，將 10 / 2（5）分配給 &#x27;a&#x27; 屬性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myObj.<span class="property">b</span>); <span class="comment">// 調用 getter，產生 a + 1，即 6</span></span><br></pre></td></tr></table></figure>

<p>選擇哪種形式取決於你的編程風格和任務性質。如果可以更改原始對象的定義，那麼你可能會通過原始初始器來定義 getter 和 setter。這種形式更緊湊和自然。然而，如果需要稍後添加 getter 和 setter —— 可能是因為你沒有編寫該特定對象 —— 那麼第二種形式是唯一可能的形式。第二種形式更好地表示了 JavaScript 的動態性，但可能使代碼難以閱讀和理解。</p>
<h3 id="比較物件"><a href="#比較物件" class="headerlink" title="比較物件"></a>比較物件</h3><p>在 JavaScript 中，物件是一種參考型別。兩個不同的物件永遠不會相等，即使它們具有相同的屬性。僅在與自身相同的物件引用進行比較時才會返回 <code>true</code>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 兩個變數，兩個具有相同屬性的不同物件</span></span><br><span class="line"><span class="keyword">const</span> fruit = &#123; <span class="attr">name</span>: <span class="string">&quot;蘋果&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> fruitbear = &#123; <span class="attr">name</span>: <span class="string">&quot;蘋果&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">fruit == fruitbear; <span class="comment">// 返回 false</span></span><br><span class="line">fruit === fruitbear; <span class="comment">// 返回 false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 兩個變數，一個物件</span></span><br><span class="line"><span class="keyword">const</span> fruit = &#123; <span class="attr">name</span>: <span class="string">&quot;蘋果&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> fruitbear = fruit; <span class="comment">// 將 fruit 物件的引用賦值給 fruitbear</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此時 fruit 和 fruitbear 指向同一個物件</span></span><br><span class="line">fruit == fruitbear; <span class="comment">// 返回 true</span></span><br><span class="line">fruit === fruitbear; <span class="comment">// 返回 true</span></span><br><span class="line"></span><br><span class="line">fruit.<span class="property">name</span> = <span class="string">&quot;葡萄&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruitbear); <span class="comment">// &#123; name: &quot;葡萄&quot; &#125;，而不是 &#123; name: &quot;蘋果&quot; &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="總結："><a href="#總結：" class="headerlink" title="總結："></a><strong>總結：</strong></h3><p>JavaScript 的物件是語言核心的基石之一，通過本文我們學習了如何創建、訪問和操作物件，以及如何使用方法和 <code>this</code> 來引用物件。了解這些概念對於進一步發展 JavaScript 應用程序至關重要，它為開發者提供了豐富的工具和技術，以更好地組織和管理代碼。</p>
<h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects#%E6%9E%9A%E4%B8%BE%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7">MDN Web Docs</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AlphaCamp_Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript JSON</title>
    <url>/2024/061036494.html</url>
    <content><![CDATA[<p>JSON（JavaScript Object Notation）是一種標準的資料格式，用於表示結構化資料，常用於網站的資料傳輸和呈現。JSON以JavaScript物件的形式存在，並且可以獨立於JavaScript使用。JSON的應用範圍廣泛，從簡單的資料到複雜的資料結構都可以使用。</p>
<p><strong>JSON的結構</strong></p>
<p>JSON基本上就是JavaScript物件，可以包含各種基本資料類型，如字串、數字、陣列、布林值，以及其他物件。以下是JSON的一個範例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;squadName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Super hero squad&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;homeTown&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Metro City&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;formed&quot;</span><span class="punctuation">:</span> <span class="number">2016</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;secretBase&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Super tower&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;active&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;members&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Molecule Man&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">29</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;secretIdentity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Dan Jukes&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;powers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Radiation resistance&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Turning tiny&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Radiation blast&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Madame Uppercut&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;secretIdentity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jane Wilson&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;powers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;Million tonne punch&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Damage resistance&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Superhuman reflexes&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Eternal Flame&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">1000000</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;secretIdentity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Unknown&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;powers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;Immortality&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Heat Immunity&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Inferno&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Teleportation&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;Interdimensional travel&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>存取JSON資料</strong></p>
<p>使用JavaScript，可以輕鬆存取JSON物件中的資料。例如，要存取上述JSON物件中的成員列表中的第二位英雄的第三項超能力，可以透過以下方式進行：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">javascript複製程式碼</span><br><span class="line">superHeroes.<span class="property">members</span>[<span class="number">1</span>].<span class="property">powers</span>[<span class="number">2</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>JSON與陣列</strong></p>
<p>除了物件外，陣列也可以是有效的JSON物件。以下是JSON陣列的範例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">json複製程式碼</span><br><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Molecule Man&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">29</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;secretIdentity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Dan Jukes&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;powers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Radiation resistance&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Turning tiny&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Radiation blast&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Madame Uppercut&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;secretIdentity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jane Wilson&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;powers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;Million tonne punch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;Damage resistance&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;Superhuman reflexes&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h2 id="物件與文字交互轉換"><a href="#物件與文字交互轉換" class="headerlink" title="物件與文字交互轉換"></a>物件與文字交互轉換</h2><p>我們接收到文字字串格式的 JSON 資料，需將之轉換回物件。且當我們要以某種訊息傳送 JSON 資料時，也必須將之轉換為字串才能正確運作。內建的 JSON 物件很早就新增到瀏覽器之中，且包含下列 2 種函式：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse"><code>parse()</code></a>：接收文字字串形式的 JSON 物件作為參數，並回傳對應的物件。</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"><code>stringify()</code></a>：接收 JSON 物件作為參數，並回傳對等的文字字串形式。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">request.open(&quot;GET&quot;, requestURL);</span><br><span class="line">request.responseType = &quot;text&quot;; // now we&#x27;re getting a string!</span><br><span class="line">request.send();</span><br><span class="line"></span><br><span class="line">request.onload = function () &#123;</span><br><span class="line">  var superHeroesText = request.response; // get the string from the response</span><br><span class="line">  var superHeroes = JSON.parse(superHeroesText); // convert it to an object</span><br><span class="line">  populateHeader(superHeroes);</span><br><span class="line">  showHeroes(superHeroes);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以及以下<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"><code>stringify()</code></a> 的案例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myJSON = &#123; name: &quot;Chris&quot;, age: &quot;38&quot; &#125;;</span><br><span class="line">myJSON;</span><br><span class="line">var myString = JSON.stringify(myJSON);</span><br><span class="line">myString;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>這樣就建立了 JSON 物件了。接著檢查內容物之後，就可透過 <code>stringify()</code> 將之轉換為字串。將回傳值儲存到新變數之中，再檢查一次即可。</p>
<p><strong>其他注意事項</strong></p>
<ul>
<li>JSON是一種純粹的資料格式，僅具有屬性，不含函式。</li>
<li>JSON的屬性值必須使用雙引號。</li>
<li>JSON的語法必須嚴格符合規定，否則會導致資料無法正常解析。</li>
<li>JSON的應用範圍廣泛，不僅限於物件或陣列。</li>
</ul>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>本文深入介紹了JavaScript物件與JSON格式的基本概念，包括如何建立自定義的JSON物件以及如何存取其中的資料。對於網頁開發者來說，熟悉JavaScript與JSON的使用是必不可少的技能。</p>
<h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/JSON">MDN Web Docs - JavaScript 物件與 JSON</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AlphaCamp_Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Array</title>
    <url>/2024/061134797.html</url>
    <content><![CDATA[<p>Array（「陣列」）是類似列表（list）的物件（Object），它們的原型（Prototype）擁有方法（methods）來執行遍歷和變異操作。JavaScript 陣列的長度（元素數量），以及其元素的類型都不是固定的。取決於工程師如何選擇使用陣列，可以隨時更改陣列的長度，也可不連續儲存資料， 所以並不保證這些資料是集中的。</p>
<h3 id="陣列是由名稱和索引引用的值構成的有序列表。"><a href="#陣列是由名稱和索引引用的值構成的有序列表。" class="headerlink" title="陣列是由名稱和索引引用的值構成的有序列表。"></a><strong>陣列是由名稱和索引引用的值構成的有序列表。</strong></h3><p>舉例來說，考慮一個名為 emp 的陣列，它包含按照數字員工編號索引的員工姓名。因此 emp[0] 是 0 號員工，emp[1] 是 1 號員工，以此類推。</p>
<p><strong>JavaScript 中沒有明確的陣列數據類型</strong>。但是，你可以使用預定義的 Array 對象及其方法來處理應用程序中的陣列。Array 對象具有以各種方式操作陣列的方法，例如連接、反轉和排序。它有一個用於確定陣列長度的屬性和用於正則表達式的其他屬性。</p>
<p>陣列有分為一般的陣列Array及型別陣列Typed Array，Typed Array 是泛指不同限定型別(typed)的陣列，且都是用來操作binary data。目前ES6定義了九種typed array types，詳細可以查看<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray">MDN</a>。在這篇文章中，我們將專注於陣列(array)，但許多相同的概念也適用於類型化陣列，因為陣列和類型化陣列共享許多相似的方法。</p>
<h3 id="創建數組"><a href="#創建數組" class="headerlink" title="創建數組"></a>創建數組</h3><p>以下語句創建了等效的數組：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(element0, element1, <span class="comment">/* … ,*/</span> elementN);</span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="title class_">Array</span>(element0, element1, <span class="comment">/* … ,*/</span> elementN);</span><br><span class="line"><span class="keyword">const</span> arr3 = [element0, element1, <span class="comment">/* … ,*/</span> elementN];</span><br></pre></td></tr></table></figure>

<p><code>element0, element1, …, elementN</code> 是數組元素的值列表。當指定這些值時，數組將以它們作為數組的元素進行初始化。數組的 <code>length</code> 屬性被設置為參數的數量。</p>
<p>括號語法稱為“數組字面量”或“數組初始化式”。它比其他形式的數組創建更簡短，因此通常是首選。詳見數組字面量。</p>
<p>為了創建一個長度不為0，但是又沒有任何元素的數組，可以選擇以下任何一種方式：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 這種方式...</span></span><br><span class="line"><span class="keyword">const</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(arrayLength);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...與這種方式會形成相同數組</span></span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="title class_">Array</span>(arrayLength);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這個效果也一樣</span></span><br><span class="line"><span class="keyword">const</span> arr3 = [];</span><br><span class="line">arr3.<span class="property">length</span> = arrayLength;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>備註：以上代碼，<code>arrayLength</code> 必須為一個數字。否則，將會創建一個只有單個元素（內含提供的值）的數組。調用 <code>arr.length</code> 將返回 <code>arrayLength</code>，但數組不包含任何元素。<code>for...in</code> 循環在數組上找不到任何屬性。</p>
<p>除了上面所示的新定義的變量外，數組還可以被賦值為新對象或現有對象的屬性：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">// …</span></span><br><span class="line">obj.<span class="property">prop</span> = [element0, element1, <span class="comment">/* … ,*/</span> elementN];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">prop</span>: [element0, element1, <span class="comment">/* … ,*/</span> elementN] &#125;;</span><br></pre></td></tr></table></figure>

<p>如果你希望用單個元素初始化一個數組，而這個元素恰好又是數字，那麼你必須使用括號語法。當單個數字傳遞給 <code>Array()</code> 構造函數時，它將被解釋為 <code>arrayLength</code>，而不是單個元素。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創建一個只有唯一元素的數組：數字 42。</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">42</span>];</span><br></pre></td></tr></table></figure>

<p>長度被設置為 42。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">42</span>);</span><br></pre></td></tr></table></figure>

<p>這兩種方法之間的區別是重要的。第一種方法創建了一個包含單個元素（數字 42）的數組。而第二種方法創建了一個具有 42 個元素的數組，但所有這些元素的值均為 <code>undefined</code>。</p>
<h3 id="數組索引"><a href="#數組索引" class="headerlink" title="數組索引"></a>數組索引</h3><p>數組中的每個元素都有一個關聯的數字索引，從 0 開始，逐一遞增。數組的第一個元素的索引是 0，第二個是 1，以此類推。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Banana&#x27;</span>, <span class="string">&#x27;Orange&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">0</span>]); <span class="comment">// Apple</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">1</span>]); <span class="comment">// Banana</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">2</span>]); <span class="comment">// Orange</span></span><br></pre></td></tr></table></figure>

<p>你可以通過索引來訪問和修改數組中的元素。如果你訪問一個不存在的索引，將返回 <code>undefined</code>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">3</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="數組長度"><a href="#數組長度" class="headerlink" title="數組長度"></a>數組長度</h3><p>每個數組都有一個 <code>length</code> 屬性，表示其元素的數量。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="property">length</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p><code>length</code> 屬性的值等於數組中最大整數索引加上 1。</p>
<h2 id="數組排序"><a href="#數組排序" class="headerlink" title="數組排序"></a>數組排序</h2><p>在處理數據時，通常需要按照某種順序對數組進行排序。JavaScript提供了<code>sort()</code>方法來排序數組的元素。默認情況下，它將元素視為字符串並按照Unicode字符順序進行排序。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">numbers.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<p>如果需要按照其他標準排序，可以通過提供<code>compareFunction</code>作為參數來實現。例如，按照數字大小排序：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">numbers.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br></pre></td></tr></table></figure>

<p>如果 <code>compareFunction</code> 被應用，陣列元素們將根據比較函式之回傳值來排序。如果 <code>a</code> 和 <code>b</code> 為被比較之兩元素，則：</p>
<ul>
<li>若 <code>compareFunction(a, b)</code> 的回傳值小於 0，則會把 <code>a</code> 排在小於 <code>b</code> 之索引的位置，即 <code>a</code> 排在 <code>b</code> 前面。</li>
<li>若 <code>compareFunction(a, b)</code> 回傳 0，則 <code>a</code> 與 <code>b</code> 皆不會改變彼此的順序，但會與其他全部的元素比較來排序。備註：ECMAscript 標準並不保證這個行為，因此不是所有瀏覽器（如 Mozilla 版本在 2003 以前）都遵守此行為。</li>
<li>若 <code>compareFunction(a, b)</code> 的回傳值大於 0，則會把 <code>b</code> 排在小於 <code>a</code> 之索引的位置，即 <code>b</code> 排在 <code>a</code> 前面。</li>
<li><code>compareFunction(a, b)</code> 在給予一組特定元素 a 及 b 為此函數之兩引數時必須總是回傳相同的值。若回傳值不一致，排序順序則為 undefined。</li>
</ul>
<h2 id="數組搜索"><a href="#數組搜索" class="headerlink" title="數組搜索"></a>數組搜索</h2><p>有時候，我們需要查找數組中是否存在特定的值，或者找到特定值的索引。JavaScript提供了<code>indexOf()</code>和<code>lastIndexOf()</code>方法來實現這一點。<code>indexOf()</code>方法返回第一個匹配的元素索引，而<code>lastIndexOf()</code>返回最後一個匹配的元素索引。如果未找到匹配，則返回-1。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;apple&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">indexOf</span>(<span class="string">&quot;apple&quot;</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;apple&quot;</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">indexOf</span>(<span class="string">&quot;pear&quot;</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<h2 id="刪除和添加元素"><a href="#刪除和添加元素" class="headerlink" title="刪除和添加元素"></a>刪除和添加元素</h2><p>JavaScript提供了多種方法來刪除和添加數組中的元素。<code>pop()</code>方法用於刪除並返回數組的最後一個元素，<code>push()</code>方法用於在數組的末尾添加一個或多個元素。類似地，<code>shift()</code>方法用於刪除並返回數組的第一個元素，而<code>unshift()</code>方法用於在數組的開頭添加一個或多個元素。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">pop</span>(); <span class="comment">// &quot;orange&quot;</span></span><br><span class="line">fruits.<span class="title function_">push</span>(<span class="string">&quot;pear&quot;</span>); <span class="comment">// [&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;]</span></span><br><span class="line">fruits.<span class="title function_">shift</span>(); <span class="comment">// &quot;apple&quot;</span></span><br><span class="line">fruits.<span class="title function_">unshift</span>(<span class="string">&quot;grape&quot;</span>); <span class="comment">// [&quot;grape&quot;, &quot;banana&quot;, &quot;pear&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="遍歷數組"><a href="#遍歷數組" class="headerlink" title="遍歷數組"></a>遍歷數組</h2><p>遍歷數組是在開發中非常常見的操作，它允許我們對數組中的每個元素進行操作。JavaScript提供了多種方法來實現數組的遍歷，包括<code>for</code>循環、<code>forEach()</code>方法、<code>map()</code>方法等等。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 使用for循環</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(numbers[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用forEach方法</span></span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(number);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 使用map方法</span></span><br><span class="line"><span class="keyword">const</span> squaredNumbers = numbers.<span class="title function_">map</span>(<span class="function"><span class="params">number</span> =&gt;</span> number * number);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(squaredNumbers);</span><br></pre></td></tr></table></figure>

<h2 id="過濾數組"><a href="#過濾數組" class="headerlink" title="過濾數組"></a>過濾數組</h2><p>有時候我們需要根據特定條件過濾數組中的元素，JavaScript提供了<code>filter()</code>方法來實現這一操作。<code>filter()</code>方法會返回一個新的數組，其中包含符合條件的元素。例如，過濾出所有偶數：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> evenNumbers = numbers.<span class="title function_">filter</span>(<span class="function"><span class="params">number</span> =&gt;</span> number % <span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evenNumbers); <span class="comment">// [2, 4</span></span><br></pre></td></tr></table></figure>

<h2 id="範圍查詢"><a href="#範圍查詢" class="headerlink" title="範圍查詢"></a>範圍查詢</h2><p>有時候我們需要查詢數組中的一部分元素，JavaScript提供了<code>slice()</code>方法來實現這一操作。<code>slice()</code>方法會返回一個新的數組，其中包含指定範圍的元素。例如，提取第二個到第四個元素：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;grape&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> selectedFruits = fruits.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(selectedFruits); <span class="comment">// [&quot;banana&quot;, &quot;orange&quot;, &quot;pear&quot;]</span></span><br></pre></td></tr></table></figure>

<p>在上面的示例中，<code>slice(1, 4)</code>返回從索引1（包括）到索引4（不包括）之間的元素，即2到4。</p>
<h2 id="判斷元素是否存在"><a href="#判斷元素是否存在" class="headerlink" title="判斷元素是否存在"></a>判斷元素是否存在</h2><p>另一個常見的需求是判斷數組中是否存在某個元素。JavaScript提供了<code>includes()</code>方法來實現這一操作。如果元素存在於數組中，則返回<code>true</code>；如果不存在，則返回<code>false</code>。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;grape&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> exists = fruits.<span class="title function_">includes</span>(<span class="string">&quot;orange&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exists); <span class="comment">// tru</span></span><br></pre></td></tr></table></figure>

<h2 id="查找符合條件的元素"><a href="#查找符合條件的元素" class="headerlink" title="查找符合條件的元素"></a>查找符合條件的元素</h2><p>有時我們需要在數組中查找符合特定條件的元素。JavaScript提供了<code>find()</code>方法來實現這一操作。<code>find()</code>方法會返回第一個符合條件的元素，如果沒有找到則返回<code>undefined</code>。例如，查找第一個以”a”開頭的水果：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;grape&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> startsWithA = fruits.<span class="title function_">find</span>(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.<span class="title function_">startsWith</span>(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(startsWithA); <span class="comment">// &quot;apple&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="查找符合條件的元素索引"><a href="#查找符合條件的元素索引" class="headerlink" title="查找符合條件的元素索引"></a>查找符合條件的元素索引</h2><p>除了查找符合條件的元素外，有時我們還需要查找其索引。JavaScript提供了<code>findIndex()</code>方法來實現這一操作。<code>findIndex()</code>方法會返回第一個符合條件的元素的索引，如果沒有找到則返回-1。例如，查找第一個以”p”開頭的水果的索引：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;grape&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> index = fruits.<span class="title function_">findIndex</span>(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.<span class="title function_">startsWith</span>(<span class="string">&quot;p&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h2 id="合併數組"><a href="#合併數組" class="headerlink" title="合併數組"></a>合併數組</h2><p>有時候我們需要將多個數組合併成一個，JavaScript提供了<code>concat()</code>方法來實現這一操作。<code>concat()</code>方法會返回一個新的數組，其中包含合併後的所有元素。例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> mergedArray = arr1.<span class="title function_">concat</span>(arr2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mergedArray); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>數組是 JavaScript 中常用的數據結構之一，用於存儲和操作有序的元素集合。通過本文，你了解了如何創建、訪問和操作數組，以及一些常見的迭代技巧。這將幫助你更好地利用數組在你的 JavaScript 項目中。</p>
<p>瞭解數組的特性和操作方法對於開發 JavaScript 應用程序至關重要。通過實踐和實際應用，你將能夠更好地利用這一強大的數據結構，使你的代碼更加高效和易於維護。</p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array">MDN Web 文檔：數組</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Grammar_and_types#Array_literals">MDN Web 文檔：數組字面量</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/TypedArray">MDN Web 文檔：TypedArray</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#%E8%AA%9E%E6%B3%95">MDN Web 文檔：<strong>Array.prototype.sort()</strong></a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>AlphaCamp_Notes</tag>
      </tags>
  </entry>
</search>
